from backend.p4._template import unit_indent
from typing import List

class _StructDefinition:
    def __init__(self, struct_id : str):
        self.struct_id = struct_id
        self.struct_members : List[(str, str)] = []

    def add_member(self, member_id : str, member_type : str):
        self.struct_members.append((member_id, member_type))

    def dump(self, init_indent : str) -> str:
        indent = init_indent
        output = indent + "struct " + self.struct_id + " {\n"

        indent += unit_indent
        for (member_id, member_type) in self.struct_members:
            output += indent + member_type + " " + member_id + ";\n"

        indent = indent[:-len(unit_indent)]
        output += indent + "}\n"

        return output

class StructDefinitionFactory:
    def __init__(self):
        self.struct_definitions : List[_StructDefinition] = []
        pass

    def add_struct(self, struct_id):
        self.struct_definitions.append(_StructDefinition(struct_id))
        return self.struct_definitions[-1]

    def dump(self, init_indent : str) -> str:
        output = f"{init_indent}// generated by StructDefinitionFactory_{id(self)} start\n"
        for struct in self.struct_definitions:
            output += struct.dump(init_indent) + "\n"
        output += f"{init_indent}// generated by StructDefinitionFactory_{id(self)} end\n"
        return output